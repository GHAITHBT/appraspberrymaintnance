import RPi.GPIO as GPIO
import time
import threading
import logging
import requests
import socket
from threading import Thread

# Setup logging
logging.basicConfig(
    filename='button_log.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# GPIO Pin Configuration
LED_DOWNTIME = 8
LED_MAINTENANCE = 7
LED_EMERGENCY = 12
LED_DOWNTIME_ALERT = 17

BUTTON_DOWNTIME = 11
BUTTON_MAINTENANCE = 5
BUTTON_EMERGENCY = 6
SENSOR_OBSTACLE = 3

# Main Flask app API base URL
MAIN_API_BASE_URL = "http://10.110.30.15:1250/api"

# Global state
TEAM_NAME = None
last_sensor_trigger = time.time()
downtime_triggered = False
selected_led = None
is_first_run = True
event_start_time = None
awaiting_user_id = False

def get_ip_address():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip_address = s.getsockname()[0]
        s.close()
        logger.info(f"Retrieved IP address: {ip_address}")
        return ip_address
    except Exception as e:
        logger.error(f"Error getting IP address: {e}")
        return None

def fetch_machine_name(ip_address):
    try:
        url = f"{MAIN_API_BASE_URL}/get_machine_name"
        data = {"ip_address": ip_address}
        response = requests.post(url, json=data, timeout=5)
        if response.status_code == 200:
            machine_name = response.json().get("machine_name")
            logger.info(f"Retrieved machine name: {machine_name} for IP: {ip_address}")
            return machine_name
        else:
            logger.warning(f"Failed to fetch machine name: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logger.error(f"Error fetching machine name from {url}: {e}")
        return None

def setup_gpio():
    try:
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        GPIO.setup(LED_DOWNTIME, GPIO.OUT)
        GPIO.setup(LED_MAINTENANCE, GPIO.OUT)
        GPIO.setup(LED_EMERGENCY, GPIO.OUT)
        GPIO.setup(LED_DOWNTIME_ALERT, GPIO.OUT)
        
        GPIO.setup(BUTTON_DOWNTIME, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(BUTTON_MAINTENANCE, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(BUTTON_EMERGENCY, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(SENSOR_OBSTACLE, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        
        print("Turning on all LEDs for 2 seconds...")
        GPIO.output(LED_DOWNTIME, GPIO.HIGH)
        GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
        GPIO.output(LED_EMERGENCY, GPIO.HIGH)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
        time.sleep(2)
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        
        logger.info("GPIO setup completed successfully")
    except Exception as e:
        logger.error(f"GPIO setup error: {e}")
        print(f"GPIO setup error: {e}")

def send_event_async(event_type, duration=None, user_id=None):
    if TEAM_NAME is None:
        logger.error("Cannot send event: TEAM_NAME not set")
        return
    
    def send_request():
        try:
            url = f"{MAIN_API_BASE_URL}/{event_type}/{TEAM_NAME}"
            data = {
                "machine": TEAM_NAME,
                "duration": duration,
                "user_id": user_id if user_id else "N/A"
            }
            response = requests.post(url, json=data, timeout=5)
            if response.status_code == 200:
                logger.info(f"Successfully sent {event_type} event for {TEAM_NAME} with user_id {user_id}")
            else:
                logger.warning(f"Failed to send {event_type} event: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"Error sending {event_type} event to {url}: {e}")
    
    Thread(target=send_request, daemon=True).start()

def reset_system(event_type=None, user_id=None):
    global last_sensor_trigger, downtime_triggered, selected_led, is_first_run, event_start_time, awaiting_user_id
    duration = None
    if event_type and event_start_time:
        duration = time.time() - event_start_time
        logger.info(f"Event {event_type} ended for {TEAM_NAME}. Duration: {duration:.2f} seconds")
        print(f"Event {event_type} ended. Duration: {duration:.2f} seconds")
        send_event_async(f"reset_{event_type}", duration, user_id)
    
    GPIO.output(LED_DOWNTIME, GPIO.LOW)
    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
    GPIO.output(LED_EMERGENCY, GPIO.LOW)
    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
    last_sensor_trigger = time.time()
    downtime_triggered = False
    selected_led = None
    event_start_time = None
    is_first_run = True
    awaiting_user_id = False
    logger.info("System reset")
    print("System reset")

def display_lcd_simulation(message):
    print("\n" + "="*20)
    print(f"LCD: {message}")
    print("="*20 + "\n")

def get_user_id_from_input():
    display_lcd_simulation("Enter User ID: ")
    user_id = input("User ID: ").strip()
    return user_id if user_id else "N/A"

def monitor_buttons_and_downtime():
    global last_sensor_trigger, downtime_triggered, selected_led, is_first_run, event_start_time, awaiting_user_id
    
    prev_sensor = GPIO.HIGH
    prev_downtime = GPIO.HIGH
    prev_maintenance = GPIO.HIGH
    prev_emergency = GPIO.HIGH
    
    flash_state = False
    last_flash_time = time.time()
    
    while True:
        try:
            curr_sensor = GPIO.input(SENSOR_OBSTACLE)
            curr_downtime = GPIO.input(BUTTON_DOWNTIME)
            curr_maintenance = GPIO.input(BUTTON_MAINTENANCE)
            curr_emergency = GPIO.input(BUTTON_EMERGENCY)
            
            if prev_sensor == GPIO.HIGH and curr_sensor == GPIO.LOW and is_first_run:
                logger.info(f"Sensor triggered on GPIO {SENSOR_OBSTACLE} for {TEAM_NAME}")
                print(f"Sensor triggered on GPIO {SENSOR_OBSTACLE}")
                last_sensor_trigger = time.time()
                if downtime_triggered or selected_led:
                    reset_system(selected_led_to_event_type(selected_led))
            
            if time.time() - last_sensor_trigger > 5 and not downtime_triggered and not selected_led:
                logger.info(f"5 seconds passed without sensor trigger for {TEAM_NAME} - Turning on all LEDs")
                print("5 seconds passed without sensor trigger - Turning on all LEDs")
                GPIO.output(LED_DOWNTIME, GPIO.HIGH)
                GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
                GPIO.output(LED_EMERGENCY, GPIO.HIGH)
                GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
                downtime_triggered = True
                is_first_run = False
            
            if not awaiting_user_id:
                if prev_downtime == GPIO.HIGH and curr_downtime == GPIO.LOW:
                    logger.info(f"Downtime button PRESSED on GPIO {BUTTON_DOWNTIME} for {TEAM_NAME}")
                    print(f"Downtime button PRESSED on GPIO {BUTTON_DOWNTIME}")
                    if selected_led == LED_DOWNTIME:
                        awaiting_user_id = True
                        user_id = get_user_id_from_input()
                        reset_system("downtime", user_id)
                    elif downtime_triggered and not selected_led:
                        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
                        GPIO.output(LED_EMERGENCY, GPIO.LOW)
                        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                        selected_led = LED_DOWNTIME
                        downtime_triggered = False
                        event_start_time = time.time()
                        awaiting_user_id = True
                        user_id = get_user_id_from_input()
                        send_event_async("downtime", user_id=user_id)
                        awaiting_user_id = False
                
                elif prev_maintenance == GPIO.HIGH and curr_maintenance == GPIO.LOW:
                    logger.info(f"Maintenance button PRESSED on GPIO {BUTTON_MAINTENANCE} for {TEAM_NAME}")
                    print(f"Maintenance button PRESSED on GPIO {BUTTON_MAINTENANCE}")
                    if selected_led == LED_MAINTENANCE:
                        awaiting_user_id = True
                        user_id = get_user_id_from_input()
                        reset_system("maintenance", user_id)
                    elif downtime_triggered and not selected_led:
                        GPIO.output(LED_DOWNTIME, GPIO.LOW)
                        GPIO.output(LED_EMERGENCY, GPIO.LOW)
                        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                        selected_led = LED_MAINTENANCE
                        downtime_triggered = False
                        event_start_time = time.time()
                        awaiting_user_id = True
                        user_id = get_user_id_from_input()
                        send_event_async("maintenance", user_id=user_id)
                        awaiting_user_id = False
                
                elif prev_emergency == GPIO.HIGH and curr_emergency == GPIO.LOW:
                    logger.info(f"Emergency button PRESSED on GPIO {BUTTON_EMERGENCY} for {TEAM_NAME}")
                    print(f"Emergency button PRESSED on GPIO {BUTTON_EMERGENCY}")
                    if selected_led == LED_EMERGENCY:
                        awaiting_user_id = True
                        user_id = get_user_id_from_input()
                        reset_system("emergency", user_id)
                    elif downtime_triggered and not selected_led:
                        GPIO.output(LED_DOWNTIME, GPIO.LOW)
                        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
                        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                        selected_led = LED_EMERGENCY
                        downtime_triggered = False
                        event_start_time = time.time()
                        awaiting_user_id = True
                        user_id = get_user_id_from_input()
                        send_event_async("emergency", user_id=user_id)
                        awaiting_user_id = False
            
            if selected_led and not awaiting_user_id:
                if time.time() - last_flash_time >= 0.25:
                    flash_state = not flash_state
                    GPIO.output(selected_led, GPIO.HIGH if flash_state else GPIO.LOW)
                    last_flash_time = time.time()
            
            prev_sensor = curr_sensor
            prev_downtime = curr_downtime
            prev_maintenance = curr_maintenance
            prev_emergency = curr_emergency
            
            time.sleep(0.01)
        except Exception as e:
            logger.error(f"Error in monitor_buttons_and_downtime: {e}")
            print(f"Error in monitor_buttons_and_downtime: {e}")

def selected_led_to_event_type(led):
    if led == LED_DOWNTIME:
        return "downtime"
    elif led == LED_MAINTENANCE:
        return "maintenance"
    elif led == LED_EMERGENCY:
        return "emergency"
    return None

def main():
    global TEAM_NAME
    try:
        GPIO.cleanup()
        logger.info("Initial GPIO cleanup completed")
        
        ip_address = get_ip_address()
        if ip_address:
            TEAM_NAME = fetch_machine_name(ip_address)
        if not TEAM_NAME:
            logger.error("Failed to retrieve machine name. Using default 'Unknown'")
            TEAM_NAME = "Unknown"
        
        setup_gpio()
        time.sleep(0.1)
        
        monitor_thread = threading.Thread(target=monitor_buttons_and_downtime, daemon=True)
        monitor_thread.start()
        
        logger.info(f"System started for {TEAM_NAME}. Waiting for sensor triggers...")
        print(f"System started for {TEAM_NAME}. Sensor must detect obstacle to prevent downtime (first run only).")
        print("If 5 seconds pass without detection, all LEDs will turn on.")
        
        while True:
            time.sleep(1)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        print(f"Error in main: {e}")
    finally:
        GPIO.cleanup()
        logger.info("GPIO cleaned up")
        print("GPIO cleaned up")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("System shutdown via keyboard interrupt")
        print("\nShutting down...")
