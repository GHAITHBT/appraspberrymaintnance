import RPi.GPIO as GPIO
import time
import threading
import logging
import requests
from threading import Thread

# Setup logging
logging.basicConfig(
    filename='button_log.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# GPIO Pin Configuration
LED_DOWNTIME = 8
LED_MAINTENANCE = 7
LED_EMERGENCY = 12
LED_DOWNTIME_ALERT = 17

BUTTON_DOWNTIME = 11
BUTTON_MAINTENANCE = 5
BUTTON_EMERGENCY = 6
BUTTON_WORKING = 13

# Main Flask app API base URL (external server)
MAIN_API_BASE_URL = "http://10.110.3.102:1250/api"  # Adjust if needed
TEAM_NAME = "Team1"  # Adjust as needed

# Global state
last_working_press = time.time()
downtime_triggered = False
selected_led = None  # Tracks which LED is flashing (None, LED_DOWNTIME, LED_MAINTENANCE, LED_EMERGENCY)
is_first_run = True  # Tracks if this is the first run or post-reset

def setup_gpio():
    try:
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        # Setup outputs
        GPIO.setup(LED_DOWNTIME, GPIO.OUT)
        GPIO.setup(LED_MAINTENANCE, GPIO.OUT)
        GPIO.setup(LED_EMERGENCY, GPIO.OUT)
        GPIO.setup(LED_DOWNTIME_ALERT, GPIO.OUT)
        
        # Setup inputs without pull-up resistors (buttons connect directly to ground)
        GPIO.setup(BUTTON_DOWNTIME, GPIO.IN)
        GPIO.setup(BUTTON_MAINTENANCE, GPIO.IN)
        GPIO.setup(BUTTON_EMERGENCY, GPIO.IN)
        GPIO.setup(BUTTON_WORKING, GPIO.IN)
        
        # Initial LED test
        print("Turning on all LEDs for 2 seconds...")
        GPIO.output(LED_DOWNTIME, GPIO.HIGH)
        GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
        GPIO.output(LED_EMERGENCY, GPIO.HIGH)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
        time.sleep(2)
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        
        logger.info("GPIO setup completed successfully")
    except Exception as e:
        logger.error(f"GPIO setup error: {e}")
        print(f"GPIO setup error: {e}")

def send_event_async(event_type):
    def send_request():
        try:
            url = f"{MAIN_API_BASE_URL}/{event_type}/{TEAM_NAME}"
            response = requests.post(url, timeout=5)
            if response.status_code == 200:
                logger.info(f"Successfully sent {event_type} event to {url}")
            else:
                logger.warning(f"Failed to send {event_type} event: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"Error sending {event_type} event to {url}: {e}")
    
    Thread(target=send_request, daemon=True).start()

def reset_system():
    global last_working_press, downtime_triggered, selected_led, is_first_run
    GPIO.output(LED_DOWNTIME, GPIO.LOW)
    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
    GPIO.output(LED_EMERGENCY, GPIO.LOW)
    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
    last_working_press = time.time()
    downtime_triggered = False
    selected_led = None
    is_first_run = True
    logger.info("System reset")
    print("System reset")

def monitor_buttons_and_downtime():
    global last_working_press, downtime_triggered, selected_led, is_first_run
    
    # Track previous button states to detect new presses
    prev_working = GPIO.HIGH
    prev_downtime = GPIO.HIGH
    prev_maintenance = GPIO.HIGH
    prev_emergency = GPIO.HIGH
    
    # Flashing state
    flash_state = False
    last_flash_time = time.time()
    
    while True:
        try:
            # Read current button states
            curr_working = GPIO.input(BUTTON_WORKING)
            curr_downtime = GPIO.input(BUTTON_DOWNTIME)
            curr_maintenance = GPIO.input(BUTTON_MAINTENANCE)
            curr_emergency = GPIO.input(BUTTON_EMERGENCY)
            
            # Detect WORKING button press (HIGH to LOW transition)
            if prev_working == GPIO.HIGH and curr_working == GPIO.LOW and is_first_run:
                logger.info(f"Working button PRESSED on GPIO {BUTTON_WORKING}")
                print(f"Working button PRESSED on GPIO {BUTTON_WORKING}")
                last_working_press = time.time()
                if downtime_triggered or selected_led:
                    reset_system()
            
            # Check for downtime (10 minutes = 600 seconds without working button press)
            if time.time() - last_working_press > 600 and not downtime_triggered and not selected_led:
                logger.info("10 minutes passed without working button press - Turning on all LEDs")
                print("10 minutes passed without working button press - Turning on all LEDs")
                GPIO.output(LED_DOWNTIME, GPIO.HIGH)
                GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
                GPIO.output(LED_EMERGENCY, GPIO.HIGH)
                GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
                downtime_triggered = True
                is_first_run = False  # WORKING button no longer works until reset
            
            # Detect other button presses
            if prev_downtime == GPIO.HIGH and curr_downtime == GPIO.LOW:
                if selected_led == LED_DOWNTIME:  # Same button clicked again
                    logger.info(f"Downtime button PRESSED again on GPIO {BUTTON_DOWNTIME} - Resetting")
                    print(f"Downtime button PRESSED again on GPIO {BUTTON_DOWNTIME} - Resetting")
                    reset_system()
                elif downtime_triggered and not selected_led:  # First press during downtime
                    logger.info(f"Downtime button PRESSED on GPIO {BUTTON_DOWNTIME}")
                    print(f"Downtime button PRESSED on GPIO {BUTTON_DOWNTIME}")
                    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
                    GPIO.output(LED_EMERGENCY, GPIO.LOW)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                    selected_led = LED_DOWNTIME
                    downtime_triggered = False
                    send_event_async("downtime")
            
            elif prev_maintenance == GPIO.HIGH and curr_maintenance == GPIO.LOW:
                if selected_led == LED_MAINTENANCE:  # Same button clicked again
                    logger.info(f"Maintenance button PRESSED again on GPIO {BUTTON_MAINTENANCE} - Resetting")
                    print(f"Maintenance button PRESSED again on GPIO {BUTTON_MAINTENANCE} - Resetting")
                    reset_system()
                elif downtime_triggered and not selected_led:  # First press during downtime
                    logger.info(f"Maintenance button PRESSED on GPIO {BUTTON_MAINTENANCE}")
                    print(f"Maintenance button PRESSED on GPIO {BUTTON_MAINTENANCE}")
                    GPIO.output(LED_DOWNTIME, GPIO.LOW)
                    GPIO.output(LED_EMERGENCY, GPIO.LOW)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                    selected_led = LED_MAINTENANCE
                    downtime_triggered = False
                    send_event_async("maintenance")
            
            elif prev_emergency == GPIO.HIGH and curr_emergency == GPIO.LOW:
                if selected_led == LED_EMERGENCY:  # Same button clicked again
                    logger.info(f"Emergency button PRESSED again on GPIO {BUTTON_EMERGENCY} - Resetting")
                    print(f"Emergency button PRESSED again on GPIO {BUTTON_EMERGENCY} - Resetting")
                    reset_system()
                elif downtime_triggered and not selected_led:  # First press during downtime
                    logger.info(f"Emergency button PRESSED on GPIO {BUTTON_EMERGENCY}")
                    print(f"Emergency button PRESSED on GPIO {BUTTON_EMERGENCY}")
                    GPIO.output(LED_DOWNTIME, GPIO.LOW)
                    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                    selected_led = LED_EMERGENCY
                    downtime_triggered = False
                    send_event_async("emergency")
            
            # Handle LED flashing if one is selected
            if selected_led:
                if time.time() - last_flash_time >= 0.25:  # Flash every 0.25 seconds
                    flash_state = not flash_state
                    GPIO.output(selected_led, GPIO.HIGH if flash_state else GPIO.LOW)
                    last_flash_time = time.time()
            
            # Update previous states
            prev_working = curr_working
            prev_downtime = curr_downtime
            prev_maintenance = curr_maintenance
            prev_emergency = curr_emergency
            
            time.sleep(0.01)  # Minimal delay for instant response
        except Exception as e:
            logger.error(f"Error in monitor_buttons_and_downtime: {e}")
            print(f"Error in monitor_buttons_and_downtime: {e}")

def main():
    try:
        # Clean up any previous GPIO configurations
        GPIO.cleanup()
        logger.info("Initial GPIO cleanup completed")
        
        setup_gpio()
        time.sleep(0.1)
        
        # Start button monitoring and downtime checking in a thread
        monitor_thread = threading.Thread(target=monitor_buttons_and_downtime, daemon=True)
        monitor_thread.start()
        
        logger.info("System started. Waiting for button presses...")
        print("System started. Press the working button to prevent downtime (first run only).")
        print("If 10 minutes pass without pressing, all LEDs will turn on.")
        
        # Keep the main thread running
        while True:
            time.sleep(1)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        print(f"Error in main: {e}")
    finally:
        GPIO.cleanup()
        logger.info("GPIO cleaned up")
        print("GPIO cleaned up")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("System shutdown via keyboard interrupt")
        print("\nShutting down...")
