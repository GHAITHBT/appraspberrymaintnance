import RPi.GPIO as GPIO
import time
import threading
import logging
import requests
import socket
from flask import Flask, render_template
from flask_socketio import SocketIO, emit
from threading import Thread

# Setup logging
logging.basicConfig(
    filename='button_log.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask app setup
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key'
socketio = SocketIO(app)

# GPIO Pin Configuration
LED_DOWNTIME = 8
LED_MAINTENANCE = 7
LED_EMERGENCY = 12
LED_DOWNTIME_ALERT = 17
BUZZER = 18

BUTTON_DOWNTIME = 11
BUTTON_MAINTENANCE = 5
BUTTON_EMERGENCY = 6
BUTTON_WORKING = 13

# Main Flask app API base URL
MAIN_API_BASE_URL = "http://10.110.30.15:1250/api"

# Global state
last_working_press = time.time()
downtime_triggered = False
selected_led = None
is_first_run = True
event_start_time = None
machine_name = None
last_button_time = 0
downtime_reason = None
countdown_active = False
countdown_end = None
buzzer_active = False

def get_ip_address():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        logger.error(f"Error getting IP address: {e}")
        return "unknown"

def get_machine_name(ip):
    try:
        url = f"{MAIN_API_BASE_URL}/get_machine_name"
        response = requests.post(url, json={"ip_address": ip}, timeout=5)
        if response.status_code == 200:
            return response.json().get("machine_name", "Unknown Machine")
        else:
            logger.warning(f"Failed to get machine name: {response.status_code} - {response.text}")
            return "Unknown Machine"
    except Exception as e:
        logger.error(f"Error querying machine name: {e}")
        return "Unknown Machine"

def setup_gpio():
    try:
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        GPIO.setup(LED_DOWNTIME, GPIO.OUT)
        GPIO.setup(LED_MAINTENANCE, GPIO.OUT)
        GPIO.setup(LED_EMERGENCY, GPIO.OUT)
        GPIO.setup(LED_DOWNTIME_ALERT, GPIO.OUT)
        GPIO.setup(BUZZER, GPIO.OUT)
        
        GPIO.setup(BUTTON_DOWNTIME, GPIO.IN)
        GPIO.setup(BUTTON_MAINTENANCE, GPIO.IN)
        GPIO.setup(BUTTON_EMERGENCY, GPIO.IN)
        GPIO.setup(BUTTON_WORKING, GPIO.IN)
        
        print("Turning on all LEDs and buzzer for 2 seconds...")
        GPIO.output(LED_DOWNTIME, GPIO.HIGH)
        GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
        GPIO.output(LED_EMERGENCY, GPIO.HIGH)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
        GPIO.output(BUZZER, GPIO.HIGH)
        time.sleep(2)
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        GPIO.output(BUZZER, GPIO.LOW)
        
        logger.info("GPIO setup completed successfully")
    except Exception as e:
        logger.error(f"GPIO setup error: {e}")
        print(f"GPIO setup error: {e}")

def send_event_async(event_type, duration, reason=None):
    def send_request():
        try:
            url = f"{MAIN_API_BASE_URL}/{event_type}"
            data = {"machine": machine_name, "duration": duration, "reason": reason}
            response = requests.post(url, json=data, timeout=5)
            if response.status_code == 200:
                logger.info(f"Successfully sent {event_type} event for {machine_name} to {url} with duration {duration}, reason {reason}")
            else:
                logger.warning(f"Failed to send {event_type} event: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"Error sending {event_type} event to {url}: {e}")
    
    Thread(target=send_request, daemon=True).start()

def reset_system(event_type=None, reason=None):
    global last_working_press, downtime_triggered, selected_led, is_first_run, event_start_time, countdown_active, countdown_end, buzzer_active
    if event_type and event_start_time:
        duration = time.time() - event_start_time
        logger.info(f"Event {event_type} ended for {machine_name}. Duration: {duration:.2f} seconds, Reason: {reason}")
        print(f"Event {event_type} ended for {machine_name}. Duration: {duration:.2f} seconds, Reason: {reason}")
        send_event_async(event_type, duration, reason)
    
    GPIO.output(LED_DOWNTIME, GPIO.LOW)
    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
    GPIO.output(LED_EMERGENCY, GPIO.LOW)
    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
    GPIO.output(BUZZER, GPIO.LOW)
    last_working_press = time.time()
    downtime_triggered = False
    selected_led = None
    event_start_time = None
    countdown_active = False
    countdown_end = None
    buzzer_active = False
    is_first_run = True
    logger.info("System reset")
    print("System reset")
    update_status()

def buzz_periodically():
    global buzzer_active
    while buzzer_active:
        GPIO.output(BUZZER, GPIO.HIGH)
        time.sleep(0.1)
        GPIO.output(BUZZER, GPIO.LOW)
        time.sleep(30)

def update_status():
    status = {}
    current_time = time.time()
    if not event_start_time:
        elapsed_time = current_time - last_working_press
        status['status'] = "Working"
        status['time'] = f"{elapsed_time:.2f} s"
        status['countdown'] = ""
        status['reason'] = ""
    elif selected_led:
        elapsed_time = current_time - event_start_time
        event_type = selected_led_to_event_type(selected_led)
        status['status'] = f"{event_type.capitalize()} Active"
        status['time'] = f"{elapsed_time:.2f} s"
        status['countdown'] = ""
        status['reason'] = ""
    elif downtime_triggered:
        elapsed_time = current_time - last_working_press
        status['status'] = "Downtime"
        status['time'] = f"{elapsed_time:.2f} s"
        if countdown_active and countdown_end:
            remaining = countdown_end - current_time
            if remaining > 0:
                status['countdown'] = f"{remaining:.2f} s"
            else:
                status['countdown'] = "EXCEEDED"
                if not buzzer_active:
                    buzzer_active = True
                    Thread(target=buzz_periodically, daemon=True).start()
        else:
            status['countdown'] = ""
        status['reason'] = downtime_reason or "Select a reason"
    socketio.emit('status_update', status)

@socketio.on('select_reason')
def handle_reason(data):
    global downtime_reason, countdown_active, countdown_end
    downtime_reason = data['reason']
    if downtime_reason == "Employee Break":
        countdown_active = True
        countdown_end = time.time() + 15 * 60
    elif downtime_reason == "Material Change":
        countdown_active = True
        countdown_end = time.time() + 3 * 60
    update_status()

@socketio.on('confirm_downtime')
def handle_confirm():
    global downtime_reason
    if downtime_triggered and downtime_reason:
        duration = time.time() - last_working_press
        reset_system("downtime", downtime_reason)

def monitor_buttons_and_downtime():
    global last_working_press, downtime_triggered, selected_led, is_first_run, event_start_time, last_button_time
    
    prev_working = GPIO.HIGH
    prev_downtime = GPIO.HIGH
    prev_maintenance = GPIO.HIGH
    prev_emergency = GPIO.HIGH
    
    flash_state = False
    last_flash_time = time.time()
    debounce_delay = 0.2
    
    while True:
        try:
            curr_working = GPIO.input(BUTTON_WORKING)
            curr_downtime = GPIO.input(BUTTON_DOWNTIME)
            curr_maintenance = GPIO.input(BUTTON_MAINTENANCE)
            curr_emergency = GPIO.input(BUTTON_EMERGENCY)
            
            current_time = time.time()
            
            if prev_working == GPIO.HIGH and curr_working == GPIO.LOW and is_first_run and (current_time - last_button_time > debounce_delay):
                logger.info(f"Working button PRESSED on GPIO {BUTTON_WORKING}")
                print(f"Working button PRESSED on GPIO {BUTTON_WORKING}")
                last_working_press = time.time()
                if downtime_triggered or selected_led:
                    reset_system(selected_led_to_event_type(selected_led))
                last_button_time = current_time
            
            if time.time() - last_working_press > 5 and not downtime_triggered and not selected_led:
                logger.info("5 seconds passed without working button press - Turning on all LEDs and buzzer")
                print("5 seconds passed without working button press - Turning on all LEDs and buzzer")
                GPIO.output(LED_DOWNTIME, GPIO.HIGH)
                GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
                GPIO.output(LED_EMERGENCY, GPIO.HIGH)
                GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
                GPIO.output(BUZZER, GPIO.HIGH)
                time.sleep(0.1)
                GPIO.output(BUZZER, GPIO.LOW)
                downtime_triggered = True
                is_first_run = False
            
            if prev_downtime == GPIO.HIGH and curr_downtime == GPIO.LOW and (current_time - last_button_time > debounce_delay):
                if selected_led == LED_DOWNTIME:
                    reset_system("downtime")
                elif not selected_led and not downtime_triggered:
                    logger.info(f"Downtime button PRESSED on GPIO {BUTTON_DOWNTIME} - Starting event for {machine_name}")
                    print(f"Downtime button PRESSED on GPIO {BUTTON_DOWNTIME} - Starting event for {machine_name}")
                    GPIO.output(LED_DOWNTIME, GPIO.HIGH)
                    selected_led = LED_DOWNTIME
                    event_start_time = time.time()
                    downtime_triggered = False
                    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
                    GPIO.output(LED_EMERGENCY, GPIO.LOW)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                last_button_time = current_time
            
            elif prev_maintenance == GPIO.HIGH and curr_maintenance == GPIO.LOW and (current_time - last_button_time > debounce_delay):
                if selected_led == LED_MAINTENANCE:
                    reset_system("maintenance")
                elif not selected_led and not downtime_triggered:
                    logger.info(f"Maintenance button PRESSED on GPIO {BUTTON_MAINTENANCE} - Starting event for {machine_name}")
                    print(f"Maintenance button PRESSED on GPIO {BUTTON_MAINTENANCE} - Starting event for {machine_name}")
                    GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
                    selected_led = LED_MAINTENANCE
                    event_start_time = time.time()
                    downtime_triggered = False
                    GPIO.output(LED_DOWNTIME, GPIO.LOW)
                    GPIO.output(LED_EMERGENCY, GPIO.LOW)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                last_button_time = current_time
            
            elif prev_emergency == GPIO.HIGH and curr_emergency == GPIO.LOW and (current_time - last_button_time > debounce_delay):
                if selected_led == LED_EMERGENCY:
                    reset_system("emergency")
                elif not selected_led and not downtime_triggered:
                    logger.info(f"Emergency button PRESSED on GPIO {BUTTON_EMERGENCY} - Starting event for {machine_name}")
                    print(f"Emergency button PRESSED on GPIO {BUTTON_EMERGENCY} - Starting event for {machine_name}")
                    GPIO.output(LED_EMERGENCY, GPIO.HIGH)
                    selected_led = LED_EMERGENCY
                    event_start_time = time.time()
                    downtime_triggered = False
                    GPIO.output(LED_DOWNTIME, GPIO.LOW)
                    GPIO.output(LED_MAINTENANCE, GPIO.LOW)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
                last_button_time = current_time
            
            if selected_led and (current_time - last_flash_time >= 0.25):
                flash_state = not flash_state
                GPIO.output(selected_led, GPIO.HIGH if flash_state else GPIO.LOW)
                last_flash_time = current_time
            
            update_status()
            
            prev_working = curr_working
            prev_downtime = curr_downtime
            prev_maintenance = curr_maintenance
            prev_emergency = curr_emergency
            
            time.sleep(0.01)
        except Exception as e:
            logger.error(f"Error in monitor_buttons_and_downtime: {e}")
            print(f"Error in monitor_buttons_and_downtime: {e}")

def selected_led_to_event_type(led):
    if led == LED_DOWNTIME:
        return "downtime"
    elif led == LED_MAINTENANCE:
        return "maintenance"
    elif led == LED_EMERGENCY:
        return "emergency"
    return None

@app.route('/')
def index():
    return render_template('index.html', machine_name=machine_name)

def main():
    global machine_name
    
    try:
        GPIO.cleanup()
        logger.info("Initial GPIO cleanup completed")
        
        setup_gpio()
        time.sleep(0.1)
        
        ip_address = get_ip_address()
        machine_name = get_machine_name(ip_address)
        logger.info(f"Raspberry Pi IP: {ip_address}, Machine Name: {machine_name}")
        print(f"Raspberry Pi IP: {ip_address}, Machine Name: {machine_name}")
        
        monitor_thread = Thread(target=monitor_buttons_and_downtime, daemon=True)
        monitor_thread.start()
        
        logger.info("System started. Waiting for button presses...")
        print("System started. Access the web interface at http://<RPi_IP>:5000")
        
        socketio.run(app, host='0.0.0.0', port=5000)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        print(f"Error in main: {e}")
    finally:
        GPIO.cleanup()
        logger.info("GPIO cleaned up")
        print("GPIO cleaned up")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("System shutdown via keyboard interrupt")
        print("\nShutting down...")
