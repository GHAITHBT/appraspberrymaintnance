import RPi.GPIO as GPIO
import time
import threading
import logging

# Setup logging
logging.basicConfig(
    filename='button_log.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# GPIO Pin Configuration
LED_DOWNTIME = 8
LED_MAINTENANCE = 7
LED_EMERGENCY = 12
LED_DOWNTIME_ALERT = 17

BUTTON_DOWNTIME = 11
BUTTON_MAINTENANCE = 5
BUTTON_EMERGENCY = 6
BUTTON_WORKING = 13

# Global state
last_working_press = time.time()
downtime_triggered = False

def setup_gpio():
    try:
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        # Setup outputs
        GPIO.setup(LED_DOWNTIME, GPIO.OUT)
        GPIO.setup(LED_MAINTENANCE, GPIO.OUT)
        GPIO.setup(LED_EMERGENCY, GPIO.OUT)
        GPIO.setup(LED_DOWNTIME_ALERT, GPIO.OUT)
        
        # Setup inputs without pull-up resistors (since buttons connect to ground directly)
        GPIO.setup(BUTTON_DOWNTIME, GPIO.IN)
        GPIO.setup(BUTTON_MAINTENANCE, GPIO.IN)
        GPIO.setup(BUTTON_EMERGENCY, GPIO.IN)
        GPIO.setup(BUTTON_WORKING, GPIO.IN)
        
        # Initial LED test
        print("Turning on all LEDs for 2 seconds...")
        GPIO.output(LED_DOWNTIME, GPIO.HIGH)
        GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
        GPIO.output(LED_EMERGENCY, GPIO.HIGH)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
        time.sleep(2)
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        
        logger.info("GPIO setup completed successfully")
    except Exception as e:
        logger.error(f"GPIO setup error: {e}")
        print(f"GPIO setup error: {e}")

def working_callback(channel):
    global last_working_press, downtime_triggered
    logger.info(f"Working button PRESSED on GPIO {channel}")
    print(f"Working button PRESSED on GPIO {channel}")
    last_working_press = time.time()
    if downtime_triggered:
        # Reset downtime state if working button is pressed
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        downtime_triggered = False
        logger.info("Downtime reset by working button")
        print("Downtime reset by working button")
    time.sleep(0.2)  # Debounce

def downtime_callback(channel):
    global downtime_triggered
    if downtime_triggered:  # Only respond if downtime is active
        logger.info(f"Downtime button PRESSED on GPIO {channel}")
        print(f"Downtime button PRESSED on GPIO {channel}")
        GPIO.output(LED_DOWNTIME, GPIO.HIGH)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        downtime_triggered = False  # Reset downtime state
        time.sleep(0.2)  # Debounce

def maintenance_callback(channel):
    global downtime_triggered
    if downtime_triggered:  # Only respond if downtime is active
        logger.info(f"Maintenance button PRESSED on GPIO {channel}")
        print(f"Maintenance button PRESSED on GPIO {channel}")
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
        GPIO.output(LED_EMERGENCY, GPIO.LOW)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        downtime_triggered = False  # Reset downtime state
        time.sleep(0.2)  # Debounce

def emergency_callback(channel):
    global downtime_triggered
    if downtime_triggered:  # Only respond if downtime is active
        logger.info(f"Emergency button PRESSED on GPIO {channel}")
        print(f"Emergency button PRESSED on GPIO {channel}")
        GPIO.output(LED_DOWNTIME, GPIO.LOW)
        GPIO.output(LED_MAINTENANCE, GPIO.LOW)
        GPIO.output(LED_EMERGENCY, GPIO.HIGH)
        GPIO.output(LED_DOWNTIME_ALERT, GPIO.LOW)
        downtime_triggered = False  # Reset downtime state
        time.sleep(0.2)  # Debounce

def monitor_downtime():
    global last_working_press, downtime_triggered
    while True:
        try:
            if time.time() - last_working_press > 60:  # 1 minute = 60 seconds
                if not downtime_triggered:
                    logger.info("1 minute passed without working button press - Triggering downtime")
                    print("1 minute passed without working button press - Triggering downtime")
                    GPIO.output(LED_DOWNTIME, GPIO.HIGH)
                    GPIO.output(LED_MAINTENANCE, GPIO.HIGH)
                    GPIO.output(LED_EMERGENCY, GPIO.HIGH)
                    GPIO.output(LED_DOWNTIME_ALERT, GPIO.HIGH)
                    downtime_triggered = True
            time.sleep(1)  # Check every second
        except Exception as e:
            logger.error(f"Error in monitor_downtime: {e}")
            print(f"Error in monitor_downtime: {e}")

def setup_events():
    try:
        logger.debug("Setting up event detection...")
        # Remove any existing event detections to avoid conflicts
        for pin in [BUTTON_WORKING, BUTTON_DOWNTIME, BUTTON_MAINTENANCE, BUTTON_EMERGENCY]:
            GPIO.remove_event_detect(pin)
        
        # Add event detection with FALLING edge (no pull-ups, direct ground connection)
        GPIO.add_event_detect(BUTTON_WORKING, GPIO.FALLING, callback=working_callback, bouncetime=200)
        GPIO.add_event_detect(BUTTON_DOWNTIME, GPIO.FALLING, callback=downtime_callback, bouncetime=200)
        GPIO.add_event_detect(BUTTON_MAINTENANCE, GPIO.FALLING, callback=maintenance_callback, bouncetime=200)
        GPIO.add_event_detect(BUTTON_EMERGENCY, GPIO.FALLING, callback=emergency_callback, bouncetime=200)
        logger.info("Button event detection setup completed")
        return True
    except Exception as e:
        logger.error(f"Error setting up events: {e}")
        print(f"Error setting up events: {e}")
        return False

def main():
    try:
        # Clean up any previous GPIO configurations
        GPIO.cleanup()
        logger.info("Initial GPIO cleanup completed")
        
        setup_gpio()
        time.sleep(0.1)
        
        if not setup_events():
            logger.warning("Event detection failed. Check GPIO pins or permissions.")
            print("Event detection failed. Check GPIO pins or permissions.")
            return
        
        # Start downtime monitoring thread
        monitor_thread = threading.Thread(target=monitor_downtime, daemon=True)
        monitor_thread.start()
        
        logger.info("System started. Waiting for button presses...")
        print("System started. Press the working button to prevent downtime.")
        print("If 1 minute passes without pressing, downtime LEDs will turn on.")
        
        # Keep the main thread running
        while True:
            time.sleep(1)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        print(f"Error in main: {e}")
    finally:
        GPIO.cleanup()
        logger.info("GPIO cleaned up")
        print("GPIO cleaned up")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("System shutdown via keyboard interrupt")
        print("\nShutting down...")
